## ---------------------------------------------------
## [ nn.Linear 클래스 이해하기 ]
## - 입력 데이터와 가중치 곱셈의 합계 + 절편 결과는 반환해주는 클래스
## - 모든 입력 데이터를 가중치와 곱셈 연산 수행
## - 층에 존재하는 모든 퍼셉트론에서 진행
## - 전결합(Full Connected: FC) 층
## - 뉴런의 기본 동작을 코드로 구현한 클래스 
## ----------------------------------------------------------

## ---------------------------------------------------
## 모듈 로딩
## ---------------------------------------------------
import torch          # 텐서 및 다양한 함수들 존재 모듈
import torch.nn as nn # 인공신경망 관련 클래스, 함수 모듈

## ---------------------------------------------------
## 데이터 준비 
## ---------------------------------------------------
x = torch.tensor([[1,3,5,7,9]])

print('data =>', x.shape, x.ndim, x.dtype)

## ---------------------------------------------------
## 층에 전달 
## ---------------------------------------------------
## Layer 객체 생성 
layer1  = nn.Linear(in_features=5, out_features=1) #퍼셉트론 1개
layer10 = nn.Linear(in_features=5, out_features=10) #퍼셉트론 10개

print(f'weight1=>\n {layer1.weight}')
print('---------------------------')
print(f'weight10=>\n {layer10.weight}')

## Layer에 데이터 전달 : 객체변수명( 데이터 )
## int64 => float32 리니어는 float32만 받아요!! 형변환 필요
out1  =layer1(x.type(torch.float32))
out10 =layer10(x.type(torch.float32))

print(f'out1=>\n {out1}')
print('-------------------')
print(f'out10=>\n {out10}')

#이건 모델 만든게 아닙니 다 ...